---
- name: step deploy | 拷贝代码至目标服务器
  copy:
    src: "{{ deploy_service_file_stats.stdout_lines[0] }}"
    dest: "{{ code_online_path }}"

- name: step deploy | 备份线上代码
  shell: "mv {{ service_work_path }}/{{ deploy_service_file_stats.stdout_lines[0] | basename }} {{ code_previous_path }}/"
  ignore_errors: true

- name: step deploy | nginx.conf是否存在
  shell: "ls {{ server_nginx_conf_file }}" 
  ignore_errors: True
  register: result

- name: step deploy | 同步pre nginx.conf配置文件
  synchronize:
    src: "{{ deploy_workspace }}/Delivery/nginx/{{ pre_nginx_conf_file }}"
    dest: "{{ server_nginx_conf_file }}"
  when: result|failed and DELIVERY_ENV == "pre"

- name: step deploy | 同步prod nginx.conf配置文件
  synchronize:
    src: "{{ deploy_workspace }}/Delivery/nginx/{{ nginx_conf_file }}"
    dest: "{{ server_nginx_conf_file }}"
  when: result|failed and DELIVERY_ENV == "prod"

- name: step deploy | nginx key是否存在
  shell: "ls {{ server_nginx_key }}" 
  ignore_errors: True
  register: result

- name: step deploy | 同步nginx key配置文件
  synchronize:
    src: "{{ deploy_workspace }}/Delivery/nginx/{{ nginx_key_dir }}"
    dest: "{{ server_nginx_key_dir }}"
  when: result|failed

- name: step deploy | 部署最新代码
  copy: "src={{ code_online_path }}/{{ deploy_service_file_stats.stdout_lines[0] | basename }} dest={{ web_root_path }} owner={{ deploy_service_user }} mode=0755 remote_src=yes"

- name: step deploy | 解压文件
  shell: "cd {{ web_root_path }} && rm -rf {{ build_path }} {{ service_work_path }}.bak && unzip -o {{ service_file }} && mv {{ service_work_path }} {{ service_work_path }}.bak && mv {{ build_path }} {{ service_work_path }}"

- name: step deploy | start nginx
  shell: "systemctl start nginx"

- name: step deploy | reload nginx
  shell: "nginx -s reload"
